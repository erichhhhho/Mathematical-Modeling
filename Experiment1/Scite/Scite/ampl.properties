# Define SciTE settings for AMPL files.
# These settings override SciTEGlobal.properties.

# AMPL Files -------------------------------------------------
file.patterns.ampl=*.mod;*.dat;*.run;*.out;*.txt;
filter.ampl=AMPL (mod dat run out txt)|$(file.patterns.ampl)|

# Start maximized.
position.width=-1

# Displays line numbers at left.
line.margin.visible=1

# Makes the window have a vertical split instead of a horizontal split.
split.vertical=1

output.initial.hide=1
output.horizontal.size=400


# Help file. $(CurrentWord) gives the word that the cursor is currently on.
# command.help.$(file.patterns.ampl)="file://$(SciteDefaultHome)/amplhelp.html"

# This starts Internet Explorer with the amplhelp.html at the link <a name=...> for the currentword.
# command.help.$(file.patterns.ampl)=iexplore c:\MyLoca~1\0temp\SciGLPK\Scite\amplhelp.html#$(CurrentWord)
command.help.$(file.patterns.ampl)=iexplore $(SciteDefaultHome)/amplhelp.html#$(CurrentWord)

# This line makes Scite open the help file in the right external calling manner.
command.help.subsystem.$(file.patterns.ampl)=2

# The list of words for autocomplete.
api.$(file.patterns.ampl)=$(SciteDefaultHome)/ampl.api

# Makes the call tips 2 lines.
calltip.*.end.definition=)
#calltip.back=#FFF0FE

# This tells Scite to parse the AMPL file as though AMPL were Python.
lexer.$(file.patterns.ampl)=python
# But I wonder if C++ is a better pattern for AMPL.
# lexer.$(file.patterns.ampl)=cpp
# lexer.$(file.patterns.ampl)=matlab

# AMPL key words. -------------------------------------------------
keywordclass.ampl= (tr) and ark binary break by card check circular close commands cross data default \
	diff dimen display else exists expand find first for forall if in Infinity integer inter less let \
	max maximize member min minimize mod model node not option or ordered param printf prod \
	read repeat quit s.t. set setof solve solver subj subject sum symdiff then to union var while within \
	complements

keywords.$(file.patterns.ampl)=$(keywordclass.ampl)

# The comment.block property sets the string to be inserted or deleted at the start of the selected lines
# when the Block Comment or Uncomment command is performed.
comment.line.ampl=#
comment.block.ampl=#
# Stream comments start with a particular string and end with another particular string
# and may continue over line ends. These are defined with comment.stream.start and comment.stream.end. 
comment.stream.start.ampl=/*
comment.stream.end.ampl=*/

# This causes Scite to look for matching braces: [], {}, and ().
braces.check=1
# Braces are  matched only in operator style.
braces.*.style=10
# Matching braces show blue.
style.*.34=fore:#AA0000
# Unmatched brace shows red.
style.*.35=fore:#FF0000,bold

# With Options, Wrap, =1 makes home and end keys move to begin and end of visual line.
# =0 make them move to begin & end of logical line.
wrap.aware.home.end.keys=1

# Font styles. -------------------------------------------------

font.base=font:Courier New,size:11
#XXxxxx - red color value.
#xxXXxx - green color value.
#xxxxXX - blue color value.
#000000 - black.
#FFFFFF - white.

colour.number=fore:#000000
# The notbold doesn't work.
colour.keyword=notbold,fore:#0000AA
colour.operator=fore:#0000AA,notbold

# This corresponds to an AMPL # line comment, green.
colour.preproc=fore:#007700
# This is the streaming comments, /*...*/
font.comment=font:Courier New,size:10,fore:#007700

# Apparently unused. Would be red.
colour.error=fore:#FF0000
colour.embedded=fore:#FF0000
colour.string=fore:#FF0000
colour.char=fore:#FF0000

# Running the solver by pressing F5. -------------------------------------------------
# For AMPL, if you have a run file. Assumes the extension of the file is .run.
#command.go.$(file.patterns.ampl)=ampl $(FileName).run
command.go.$(file.patterns.ampl)=ampl $(FileName).$(FileExt)

# For GLPK, if you have a run file. (Not sure this works! - jfr 14 Aug 05.)
# command.go.$(file.patterns.ampl)="C:\My Local Documents\9Optimiz\GnuWin32\bin\glpsol" --math $(FileName).$(FileExt) -o $(FileName).out

# For GLPK, if you have a mod file.
# command.go.$(file.patterns.ampl)=..\glpk\glpsol --math $(FileName).mod -o $(FileName).out

# command.name.1.*=Indent
# command.0.*.cc=astyle -taO $(FileNameExt)
# command.is.filter.0.*.cc=1

# An experiment: You can write a javascript file that will write to the current open Scite file.
command.name.9.*=AMPL Wizard
command.9.*="file://$(SciteDefaultHome)\amplwizard.hta"
command.subsystem.9.*=2;


