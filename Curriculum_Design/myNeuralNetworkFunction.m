function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Jun-2017 21:59:40.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx9 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx6 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1.51115;10.73;0;0.29;69.81;0;5.43;0;0];
x1_step1.gain = [87.7963125548726;0.300751879699248;0.44543429844098;0.623052959501558;0.357142857142857;0.322061191626409;0.185873605947955;0.634920634920635;3.92156862745098];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.143525111964184;-0.44227825112068386;0.57757778118994885;0.18111959593570004;-0.62352018362763795;1.5229875695255788;1.7505142576056507];
IW1_1 = [0.063657076922909506 -0.52314309237881518 0.49858138741184321 0.011921028231770396 0.84300397727188303 -0.066196426906266453 -0.86243016448097942 0.066643276944832797 0.37766205114594065;-1.2047533212480779 2.5062567351669949 1.7171251745919527 -1.3467639914657012 3.0924743979555367 -1.8802021452854076 -0.73533960526477082 1.415880492013484 -0.31766912866253971;-0.73104867712979515 0.88682654444509634 0.66268585220399889 0.47004011124995071 0.31250324703355542 0.077589239933175125 -0.66420847102599767 -0.75726393107571299 -0.62373809426801397;2.3188598408405965 -0.98959014895629294 -2.3543546397597961 -1.0902390908935011 0.37604826361891414 -0.50354372864234498 0.80558612341150482 -0.58295263154254129 -0.79385335302192828;0.61138171972491095 0.24118738076915225 1.7620497031238749 -3.238770908710265 -1.239409903007102 1.4683093094463895 0.24800054020009782 -1.9870699667850664 0.71111842132139369;0.72021420488293364 -0.8556796806136 1.0669799916077405 -1.65432080128189 -0.36812446790807346 0.69012510652503622 0.478252857170128 -0.86118661327965595 0.38872704448344042;1.1662936724707851 -0.87026815772743948 0.34682804917913446 0.66507763962470057 -0.031547405379879101 0.46129874091199707 -0.39444871850951352 -0.27944441380202933 -0.16648773567657624];

% Layer 2
b2 = [-0.67885497154602514;0.061503663278039494;0.71919203989963765;-0.23014580506072815;2.6870905794390558;-1.3036187471581708];
LW2_1 = [0.38171375764449555 1.9626732844218457 0.84372491716567533 -0.061652158768187512 -5.0569813367971621 -1.8673167945476588 -1.0997016146612477;0.1175178117795158 1.1119455514194709 0.86949076843413109 2.0952238666420486 -0.94833853867127405 0.8820131167099805 -1.4331068217728398;-0.48698316726459179 -3.2958876866117151 0.92834554764955168 -0.60049046936665307 -2.3486523354523396 0.21193512489446917 -0.32146769220578386;0.069637221250468534 0.48664931274741302 0.30644057824789483 -0.054813335766715807 3.2564631140998981 0.35133234716582318 0.11261551988098809;-0.62883846512520558 -1.8863492744390489 -0.73500881110078709 -1.8599577591335907 0.97270275400858275 1.3240714204283697 1.72663761922825;0.60757809124731355 1.7474334833919194 0.66523997902238285 1.1611597243481317 4.7704255075684179 1.163565728621895 0.20049961081054282];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
