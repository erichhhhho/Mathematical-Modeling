function [y1] = Figure1data(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 07-Jun-2017 16:24:01.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx9 matrix, input #1
% and returns:
%   y = Qx6 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0;0;0;0;0;0;0];
x1_step1.gain = [2;2;2;2;2;2;2;2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.5008964871806751;1.3652886767606376;-0.92790633643051168;-0.046708610745341494;-0.92572609842045095;0.82274606261435546;1.6792673806530138];
IW1_1 = [1.3682540847806151 -0.30617548572385306 -1.4406877954299404 -0.40918236764029603 -1.1454153026535805 -0.1301240182494397 1.3215637187115326 -0.089685386431693256 -0.034675006072300368;-0.4470600330672429 1.2278952955951463 1.4680886994853664 0.74024752117264003 -0.1917652926238535 -0.58748708767228586 -0.69836190501376094 2.3474822401691298 -0.26171950385995674;0.8036945768852819 2.3098797519370864 -0.85950048341770435 -1.3755445431374071 1.5996324038506227 -0.60395439405999307 -1.4020358086535059 0.79446629218509446 -1.2490658420143912;-0.60277180003505737 -0.62826133347915725 1.8556995237309883 -3.3278943449072789 0.024287342500169059 1.1337021538405054 0.90907349807913018 -0.11172861145949825 0.4665539529320733;-1.8295820338831761 -0.27698307950991063 -0.28892175057611907 -1.0667446390094197 0.63362584360842733 0.68131178389780656 -0.22653874729764206 -2.6243929483475648 1.8023933862229293;0.83532615472477589 0.66689772644735368 2.0148566949434739 -2.2363262707454519 -0.39077628920075941 -0.21948857507906772 1.6012040169880339 -0.37283514706088794 0.44503267745777975;0.9046231893252904 -0.28292928149004581 1.4154375138593678 -1.2928048032344461 -1.7385412675046414 -0.31956021732244477 -0.22019953347773957 -0.69795598986505292 0.91654488358918351];

% Layer 2
b2 = [1.6311705183622134;-0.046109287357436607;-0.042057650575814225;-0.13256442546560077;1.2978775342150455;0.036121378989629783];
LW2_1 = [-0.86145002910570456 0.47372314409636768 2.8485803240879872 0.68735500170279329 -2.716566932469346 -1.20366540681459 -1.3042554604772199;-0.9861837918302333 0.11753420125081063 2.1482834309242054 -1.3814702308632867 0.63341319083783953 -0.21118649752181387 -0.23009271842850068;0.023866084186931376 -2.0889238599584838 -2.3762060861331769 -1.6561261254073159 0.086039345710077972 -2.4674175557734559 0.50110464798066601;0.73906391099048396 1.3399105994014011 -0.5764243968648487 1.72645879782937 -0.22806111407885196 1.1452869994847787 0.48167468398973323;2.4186926909852544 1.5808874018983046 -1.5010670994432476 -0.83028156159846356 1.5672474596172921 1.0501334828610969 2.3413111974696625;-0.051597378760939332 0.48757546967093085 -0.46936483568610904 2.6971108715164256 -0.31254140712808487 1.8268073653965025 0.018850822218335575];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
